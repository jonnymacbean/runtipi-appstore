#
# Please consult the `Deployment` section in the readme if you want to deploy
# this. You *need* to keep this nginx service, even if you have your own,
# otherwise the static files will not be served correctly! If you do remove
# it, configure yours similarly to what's in config/nginx.conf
# Also take a look at the "Static files" section in the .env file
version: 3.9
services:
  wger-web:
    image: wger/server:latest
    depends_on:
      wger-db:
        condition: service_healthy
      wger-cache:
        condition: service_healthy
    env_file:
      - ${APP_DATA_DIR}/.env
    environment:
      - TIME_ZONE: ${TZ}
      - ALLOW_REGISTRATION: ${REGISTRATION}
      - ALLOW_GUEST_USERS: ${GUESTS}
      - CSRF_TRUSTED_ORIGINS: "https://Host(`wger.${LOCAL_DOMAIN}`),https://Host(`${APP_DOMAIN}`)"
      - MEDIA_URL: https://Host(`wger.${LOCAL_DOMAIN}`)/media/
      - STATIC_URL: https://Host(`wger.${LOCAL_DOMAIN}`)/static/


    volumes:
      - ${APP_DATA_DIR}/data/static:/home/wger/static
      - ${APP_DATA_DIR}/data/media:/home/wger/media
    expose:
      - 8000
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8000
      interval: 10s
      timeout: 5s
      start_period: 300s
      retries: 5
    restart: unless-stopped

  wger-nginx:
    image: nginx:stable
    depends_on:
      - wger-web
    volumes:
      - ${APP_DATA_DIR}/data/nginx.conf:/etc/nginx/conf.d/default.conf
      - ${APP_DATA_DIR}/data/static:/wger/static:ro
      - ${APP_DATA_DIR}/data/media:/wger/media:ro
    ports:
      - ${APP_PORT}:80
    healthcheck:
      test: service nginx status
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - tipi_main_network
      - wger_network
    labels:
      # Main
      traefik.enable: true
      traefik.http.middlewares.wger-web-redirect.redirectscheme.scheme: https
      traefik.http.services.wger.loadbalancer.server.port: 80
      # Web
      traefik.http.routers.wger-insecure.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.wger-insecure.entrypoints: web
      traefik.http.routers.wger-insecure.service: wger
      traefik.http.routers.wger-insecure.middlewares: wger-web-redirect
      # Websecure
      traefik.http.routers.wger.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.wger.entrypoints: websecure
      traefik.http.routers.wger.service: wger
      traefik.http.routers.wger.tls.certresolver: myresolver
      # Local domain
      traefik.http.routers.wger-local-insecure.rule: Host(`wger.${LOCAL_DOMAIN}`)
      traefik.http.routers.wger-local-insecure.entrypoints: web
      traefik.http.routers.wger-local-insecure.service: wger
      traefik.http.routers.wger-local-insecure.middlewares: wger-web-redirect
      # Local domain secure
      traefik.http.routers.wger-local.rule: Host(`wger.${LOCAL_DOMAIN}`)
      traefik.http.routers.wger-local.entrypoints: websecure
      traefik.http.routers.wger-local.service: wger
      traefik.http.routers.wger-local.tls: true
      runtipi.managed: true

  wger-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=wger
      - POSTGRES_PASSWORD=wger
      - POSTGRES_DB=wger
    volumes:
      - ${APP_DATA_DIR}/data/postgres-data:/var/lib/postgresql/data/
    expose:
      - 5432
    healthcheck:
      test: pg_isready -U wger
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  wger-cache:
    image: redis
    expose:
      - 6379
    volumes:
      - ${APP_DATA_DIR}/data/redis-data:/data
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  wger-celery_worker:
    image: wger/server:latest
    command: /start-worker
    env_file:
      - ./.env
    volumes:
      - ${APP_DATA_DIR}/data/media:/home/wger/media
    depends_on:
      wger-web:
        condition: service_healthy
    healthcheck:
      test: celery -A wger inspect ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  wger-celery_beat:
    image: wger/server:latest
    command: /start-beat
    volumes:
      - ${APP_DATA_DIR}/data/celery-beat:/home/wger/beat/
    env_file:
      - ./.env
    depends_on:
      wger-celery_worker:
        condition: service_healthy

networks:
  default:
    name: wger_network

























    networks:
      - tipi_main_network
    labels:
      # Main
      traefik.enable: true
      traefik.http.middlewares.radarr-web-redirect.redirectscheme.scheme: https
      traefik.http.services.radarr.loadbalancer.server.port: 7878
      # Web
      traefik.http.routers.radarr-insecure.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.radarr-insecure.entrypoints: web
      traefik.http.routers.radarr-insecure.service: radarr
      traefik.http.routers.radarr-insecure.middlewares: radarr-web-redirect
      # Websecure
      traefik.http.routers.radarr.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.radarr.entrypoints: websecure
      traefik.http.routers.radarr.service: radarr
      traefik.http.routers.radarr.tls.certresolver: myresolver
      # Local domain
      traefik.http.routers.radarr-local-insecure.rule: Host(`radarr.${LOCAL_DOMAIN}`)
      traefik.http.routers.radarr-local-insecure.entrypoints: web
      traefik.http.routers.radarr-local-insecure.service: radarr
      traefik.http.routers.radarr-local-insecure.middlewares: radarr-web-redirect
      # Local domain secure
      traefik.http.routers.radarr-local.rule: Host(`radarr.${LOCAL_DOMAIN}`)
      traefik.http.routers.radarr-local.entrypoints: websecure
      traefik.http.routers.radarr-local.service: radarr
      traefik.http.routers.radarr-local.tls: true
      runtipi.managed: true
